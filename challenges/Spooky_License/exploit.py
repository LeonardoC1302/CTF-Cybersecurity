import angr

# Path to the binary
binary_path = "./spooky_license"

# Load the binary into angr
project = angr.Project(binary_path)

# Define arguments (32-character input based on analysis)
argv = [binary_path, angr.claripy.BVS("input", 32 * 8)]

# Define the initial state
state = project.factory.full_init_state(args=argv)

# Define the simulation manager
simulation = project.factory.simgr(state)

# Identify key execution points
exit_point = 0x400000 + 0x1234  # Replace with actual address of successful validation
avoid_point = 0x400000 + 0x5678  # Replace with address of "Invalid License Format"

# Explore the binary to find the correct input
simulation.explore(find=exit_point, avoid=avoid_point)

# Retrieve the correct input if a path is found
if simulation.found:
    solution = simulation.found[0].posix.dumps(1)
    print(f"Valid license key: {solution.decode()}")
else:
    print("No valid license key found.")
